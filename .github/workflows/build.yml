name: Build JBR
on: 
  workflow_dispatch: 
  push:
    paths:
      - ".github/workflows/build.yml"

env: 
  JBR_VERSION: jb17.0.8.1-b1059.3

jobs: 
  linux-x64-build: 
    runs-on: ubuntu-20.04
    steps: 
      - name: Install dependencies
        shell: bash
        run: |
          sudo apt update -y

          sudo apt purge azure-cli ghc zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* -y
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/lib/jvm/

          sudo apt install ant autoconf bison build-essential cmake flex git gperf ksh libunwind-dev\
            libasound2-dev libavcodec-dev libavformat-dev libcups2-dev libfontconfig1-dev \
            libgl1-mesa-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgif-dev\
            libgtk2.0-dev libgtk-3-dev libjpeg-dev libpng-dev libudev-dev libx11-dev libxext-dev \
            libxml2-dev libxrandr-dev libxrender-dev libxslt1-dev libxt-dev libxtst-dev libxxf86vm-dev \
            make mercurial openjdk-11-jdk openjdk-17-jdk pkg-config ruby tree x11proto-core-dev x11proto-xf86vidmode-dev zip -y

          sudo apt autoremove -y
          sudo apt autoclean -y

      - name: Compile JCEF
        env: 
          JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
          ANT_HOME: /usr/share/ant
        shell: bash
        run: |
          git clone -b dev https://github.com/JetBrains/jcef.git
          cd jcef
          cd jb/tools/linux && chmod +x *
          ./build.sh all

      - name: Compile JetBrainsRuntime
        env: 
          JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
          JDK_HOME: /usr/lib/jvm/java-17-openjdk-amd64
          BASE_DIR: build/linux-x86_64-server-release/images
          _ver: 17.0.8.1
          _jbver1: 1059
          _jbver2: 3
        shell: bash
        run: |
          git config --global core.autocrlf input
          git clone -b ${JBR_VERSION} --single-branch https://github.com/JetBrains/JetBrainsRuntime.git
          
          curl -OL https://github.com/tangruize/JetBrainsRuntime-for-Linux-x64/raw/master/idea.patch

          cd JetBrainsRuntime

          mkdir -p jcef-jetbrains

          tar xvf ../jcef/jcef_linux_x64.tar.gz -C jcef-jetbrains

          patch -Np1 < ../idea.patch

          NUM_PROC_OPT=''
          MAKEFLAG_J=$(echo ${MAKEFLAGS} | sed -En 's/.*-j([0-9]+).*/\1/p')
          if [ -n "${MAKEFLAG_J}" ]; then
            echo "Removing '-j${MAKEFLAG_J}' from MAKEFLAGS to prevent build fail. Passing it directly to ./configure."
            export MAKEFLAGS=${MAKEFLAGS/-j${MAKEFLAG_J}/}
            NUM_PROC_OPT="--with-num-cores=${MAKEFLAG_J}"
          fi

          _CFLAGS="${CFLAGS//-O2/-O3} ${CPPFLAGS} -fcommon ${CFLAGS/-fexceptions/}"
          _CXXFLAGS="${CXXFLAGS//-O2/-O3} ${CPPFLAGS} -fcommon ${CXXFLAGS/-fexceptions/}"
          _LDFLAGS=${LDFLAGS}

          unset CFLAGS
          unset CXXFLAGS
          unset LDFLAGS

          VENDOR_NAME="JetBrains s.r.o."
          JDK_BUILD_NUMBER=$(git log --simplify-by-decoration --decorate=short --pretty=short | grep "jbr-" | cut -d "(" -f2 | cut -d ")" -f1 | awk '{print $2}' | sort -t "-" -k 2 -g | tail -n 1 | tr -d "," | awk -F "-|[+]" '{print $3}')
          VENDOR_VERSION_STRING="JBR-${_ver}+${JDK_BUILD_NUMBER}-${_jbver1}.${_jbver2}-jcef"

          bash configure \
            --with-vendor-name="$VENDOR_NAME" \
            --with-vendor-version-string="$VENDOR_VERSION_STRING" \
            --with-vendor-vm-bug-url=https://youtrack.jetbrains.com/issues/JBR \
            --with-version-build="${JDK_BUILD_NUMBER}" \
            --with-version-pre="" \
            --with-version-opt="b${_jbver1}.${_jbver2}" \
            --with-stdc++lib=dynamic \
            --with-extra-cflags="${_CFLAGS}" \
            --with-extra-cxxflags="${_CXXFLAGS}" \
            --with-extra-ldflags="${_LDFLAGS}" \
            --with-libjpeg=system \
            --with-giflib=system \
            --with-libpng=system \
            --with-lcms=system \
            --with-zlib=system \
            --with-harfbuzz=system \
            --with-jvm-features=zgc \
            --enable-unlimited-crypto \
            --enable-warnings-as-errors=no \
            ${NUM_PROC_OPT} \

          make images JOBS=$(nproc)

          git apply -p0 < jb/project/tools/patches/add_jcef_module.patch

          cp -rf jcef-jetbrains ${BASE_DIR}
          cd ${BASE_DIR}

          mkdir -p jcef_tmp
          ./jdk/bin/jmod extract --dir ./jcef_tmp ./jdk/jmods/java.desktop.jmod
          ./jdk/bin/javac \
            --patch-module java.desktop=./jdk/jmods/java.desktop.jmod \
            --module-path ./jcef-jetbrains/jmods -d ./jcef_tmp/classes \
            ../../../src/java.desktop/share/classes/module-info.java
          ./jdk/bin/jmod \
            create --class-path ./jcef_tmp/classes --config ./jcef_tmp/conf \
            --header-files ./jcef_tmp/include --legal-notice ./jcef_tmp/legal --libs ./jcef_tmp/lib \
            java.desktop.jmod
          mv java.desktop.jmod ./jmods/
          rm -rf ./jcef_tmp

          mkdir -p jcef_tmp
          hash_modules=$(./jdk/bin/jmod describe ./jdk/jmods/java.base.jmod | grep hashes | awk '{print $2}' | tr '\n' '|' | sed s/\|$//)
          ./jdk/bin/jmod extract --dir ./jcef_tmp ./jdk/jmods/java.base.jmod
          rm ./jmods/java.base.jmod
          ./jdk/bin/jmod \
            create --module-path ./jmods --hash-modules "$hash_modules" \
            --class-path ./jcef_tmp/classes --cmds ./jcef_tmp/bin --config ./jcef_tmp/conf --header-files ./jcef_tmp/include --legal-notice ./jcef_tmp/legal --libs ./jcef_tmp/lib \
            java.base.jmod
          mv java.base.jmod ./jmods/
          rm -rf ./jcef_tmp

          cp ./jcef-jetbrains/jmods/* ./jmods/

          __modules=$(cat ./jdk/release | grep MODULES | sed s/MODULES=//g | sed s/' '/','/g | sed s/\"//g | sed s/\\n//g)
          __modules=${__modules},$(echo $(ls ./jcef-jetbrains/jmods) | sed s/\.jmod/,/g | sed s/,$//g | sed s/' '//g)
          ./jdk/bin/jlink \
            --module-path ./jmods --no-man-pages --compress=2 \
            --add-modules "$__modules" --output ./jbr_sdk
          
          mkdir -p ./jbr_sdk/jmods
          echo "${__modules}," | while read -d, mod; do cp ./jmods/$mod.jmod ./jbr_sdk/jmods/; done

          find "." -iname '*.so' -exec chmod +x {} \;
          find "." -iname 'jcef_helper' -exec chmod +x {} \;

      - name: Package
        env: 
          BASE_DIR: build/linux-x86_64-server-release/images
          JBR_BUNDLE: jbr_jcef
          JCEF_PATH: ../jcef/jcef_build/native/Release
        run: |
          cd JetBrainsRuntime/${BASE_DIR}
          rm -rf jbr_sdk/jmods

          tar zcf ${JBR_VERSION}.tar.gz jbr_sdk

          _path=$(pwd)
          cd -
          mv ${_path}/${JBR_VERSION}.tar.gz .

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{env.JBR_VERSION}}
          path: ${{env.JBR_VERSION}}.tar.gz
          retention-days: 7
